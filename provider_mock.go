// Code generated by mockery v2.14.0. DO NOT EDIT.

package datasource_cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockProvider is an autogenerated mock type for the Provider type
type mockProvider[T interface{}, V interface{}] struct {
	mock.Mock
}

type mockProvider_Expecter[T interface{}, V interface{}] struct {
	mock *mock.Mock
}

func (_m *mockProvider[T, V]) EXPECT() *mockProvider_Expecter[T, V] {
	return &mockProvider_Expecter[T, V]{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key, requiredModelVersion
func (_m *mockProvider[T, V]) Get(ctx context.Context, key *Key[V], requiredModelVersion uint16) (*T, error) {
	ret := _m.Called(ctx, key, requiredModelVersion)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *Key[V], uint16) *T); ok {
		r0 = rf(ctx, key, requiredModelVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *Key[V], uint16) error); ok {
		r1 = rf(ctx, key, requiredModelVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockProvider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockProvider_Get_Call[T interface{}, V interface{}] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - key *Key[V]
//  - requiredModelVersion uint16
func (_e *mockProvider_Expecter[T, V]) Get(ctx interface{}, key interface{}, requiredModelVersion interface{}) *mockProvider_Get_Call[T, V] {
	return &mockProvider_Get_Call[T, V]{Call: _e.mock.On("Get", ctx, key, requiredModelVersion)}
}

func (_c *mockProvider_Get_Call[T, V]) Run(run func(ctx context.Context, key *Key[V], requiredModelVersion uint16)) *mockProvider_Get_Call[T, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Key[V]), args[2].(uint16))
	})
	return _c
}

func (_c *mockProvider_Get_Call[T, V]) Return(_a0 *T, _a1 error) *mockProvider_Get_Call[T, V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// MGet provides a mock function with given fields: ctx, keys, requiredModelVersion
func (_m *mockProvider[T, V]) MGet(ctx context.Context, keys []*Key[V], requiredModelVersion uint16) (map[*Key[V]]*T, []*Key[V], error) {
	ret := _m.Called(ctx, keys, requiredModelVersion)

	var r0 map[*Key[V]]*T
	if rf, ok := ret.Get(0).(func(context.Context, []*Key[V], uint16) map[*Key[V]]*T); ok {
		r0 = rf(ctx, keys, requiredModelVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*Key[V]]*T)
		}
	}

	var r1 []*Key[V]
	if rf, ok := ret.Get(1).(func(context.Context, []*Key[V], uint16) []*Key[V]); ok {
		r1 = rf(ctx, keys, requiredModelVersion)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*Key[V])
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []*Key[V], uint16) error); ok {
		r2 = rf(ctx, keys, requiredModelVersion)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockProvider_MGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MGet'
type mockProvider_MGet_Call[T interface{}, V interface{}] struct {
	*mock.Call
}

// MGet is a helper method to define mock.On call
//  - ctx context.Context
//  - keys []*Key[V]
//  - requiredModelVersion uint16
func (_e *mockProvider_Expecter[T, V]) MGet(ctx interface{}, keys interface{}, requiredModelVersion interface{}) *mockProvider_MGet_Call[T, V] {
	return &mockProvider_MGet_Call[T, V]{Call: _e.mock.On("MGet", ctx, keys, requiredModelVersion)}
}

func (_c *mockProvider_MGet_Call[T, V]) Run(run func(ctx context.Context, keys []*Key[V], requiredModelVersion uint16)) *mockProvider_MGet_Call[T, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*Key[V]), args[2].(uint16))
	})
	return _c
}

func (_c *mockProvider_MGet_Call[T, V]) Return(_a0 map[*Key[V]]*T, _a1 []*Key[V], _a2 error) *mockProvider_MGet_Call[T, V] {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

// MSet provides a mock function with given fields: ctx, values, ttl
func (_m *mockProvider[T, V]) MSet(ctx context.Context, values map[string]*T, ttl time.Duration) error {
	ret := _m.Called(ctx, values, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]*T, time.Duration) error); ok {
		r0 = rf(ctx, values, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockProvider_MSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MSet'
type mockProvider_MSet_Call[T interface{}, V interface{}] struct {
	*mock.Call
}

// MSet is a helper method to define mock.On call
//  - ctx context.Context
//  - values map[string]*T
//  - ttl time.Duration
func (_e *mockProvider_Expecter[T, V]) MSet(ctx interface{}, values interface{}, ttl interface{}) *mockProvider_MSet_Call[T, V] {
	return &mockProvider_MSet_Call[T, V]{Call: _e.mock.On("MSet", ctx, values, ttl)}
}

func (_c *mockProvider_MSet_Call[T, V]) Run(run func(ctx context.Context, values map[string]*T, ttl time.Duration)) *mockProvider_MSet_Call[T, V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]*T), args[2].(time.Duration))
	})
	return _c
}

func (_c *mockProvider_MSet_Call[T, V]) Return(_a0 error) *mockProvider_MSet_Call[T, V] {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockProvider interface {
	mock.TestingT
	Cleanup(func())
}

// newMockProvider creates a new instance of mockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockProvider[T interface{}, V interface{}](t mockConstructorTestingTnewMockProvider) *mockProvider[T, V] {
	mock := &mockProvider[T, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
